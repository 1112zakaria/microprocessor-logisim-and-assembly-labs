     B   Main

ExampleString        ; start of packed string 
	DCD	#0x53595343	; ‘S’=0x53   ‘Y’=0x59   ‘S’=0x53   ‘C’=0x43
	DCD	#0x20333030
	DCD	#0x36210000	; 1st 00 is the null-terminator, 2nd 00 is just padding to fill the word

Main

; R0 = address of the packed string
  LEA   R0, [ ExampleString ]	; Equivalent to: MOV R0, ExampleString
; R1 = index of the character in the packed string ... test with several values
  MOV   R1, #5

; The rest of the following code puts the indexed character into the
; least significant byte of R0, and clears the remaining 3 bytes of R0

; ----   start of block to be later copied into  Fragment 2   ----

; R2 = offset to word containing indexed character
  LSR   R2, R1, #2		; divide index by 4
; R3 = word containing indexed character
  LDR   R3, [ R0, R2 ]
; R1 = offset of character within word R3  (offset = 0, 1, 2, or 3)
  AND   R1, R1, #3

; Need to shift character from current position to least significant byte  
;    That is: in a loop, shift the entire word 8 bits at a time until the
; 	      character reaches least significant byte
; R1 = number of digit shifts needed  
  MOV   R4, #3
  SUB   R1, R4, R1
  BEQ   DoneShiftLoop   ; if 0 shifts needed, then done shifting

; shift character into least significant byte
ShiftLoop
  LSR   R3, R3, #8
  SUB   R1, R1, #1
  BNE   ShiftLoop

DoneShiftLoop
; R3 now has indexed character in least significant byte, 
;   but may have additional characters in higher bits 
; R0 = indexed character with higher bits cleared
  AND   R0, R3, #255

; ----   end of block to be later copied into  Fragment 2   ----

  DCD  #0xFFFFFFFF		; stop



// DO NOT COPY BELOW
C Pseudocode:

R0 = &ExampleString;		// String address
R1 = <INPUT INDEX HERE>;	// Input string index here

R2 = R1 >> 2;		// Integer divides R1 by 4 to get the array offset
R3 = *(R0 + R2);	// Gets the value of the memory word offset from the array
R1 = R1 & #3;		// Gets the value of the index relative to the memory word (0, 1, 2, or 3)

R4 = 3;
R1 = R4 - R1;		// Gets the number of 8-bit shifts to perform

if (R1 != 0) {
	while (R1 > 0) {
		R3 = R3 >> 8;	// Shift by 8-bits to get the next least significant character
		R1--;		// Decrement the number of shifts

R0 = R3 & 255;		// Filter out every bit other than the least 8-significant bits